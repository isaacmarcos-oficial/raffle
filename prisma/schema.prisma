generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum CampaignType {
  FIXED
  ALEATORY
}

enum PaymentType {
  PIX_MANUAL
  PIX_AUTOMATIC
  CARD
  CASH
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  FINISHED
  CANCELED
}

model Campaign {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  code         String         @unique // Código de identificação (ex.: ABC123)
  type         CampaignType // Tipo da rifa (FIXED ou ALEATORY)
  title        String // Nome da rifa
  description  String // Descrição da rifa
  quote        Int // Quantidade de números disponíveis
  price        Float // Preço por número
  startDate    DateTime // Data de início
  drawDate     DateTime // Data do sorteio
  pixCode      String // Chave Pix para pagamento
  contactPhone String // Telefone para envio do comprovante
  minQuotes    Int? // Quantidade mínima (aplicável apenas para rifas aleatórias)
  ownerId      String         @db.ObjectId
  owner        Owner          @relation(fields: [ownerId], references: [id])
  tickets      Ticket[] // Tickets vinculados à rifa
  prizes       Prize[]
  images       String[] // URL da imagem no Cloudinary
  status       CampaignStatus
}

model Ticket {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  numbers       String[] // Número escolhido ou atribuído
  paid          Boolean // Se o pagamento foi aprovado
  paymentType   PaymentType
  purchaseDate  DateTime // Data da compra
  campaignId    String?     @db.ObjectId
  campaign      Campaign?   @relation(fields: [campaignId], references: [id])
  buyerId       String?     @db.ObjectId
  buyer         Buyer?      @relation(fields: [buyerId], references: [id]) // Relacionamento com o comprador
  recipientName String?
  prizeId       String?     @db.ObjectId // Relacionamento com o prêmio (opcional)
  prize         Prize[]
}

model Owner {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  email    String     @unique // E-mail do owner para login
  password String // Senha do owner (para integrar ao NextAuth)
  name     String
  phone    String
  campaign Campaign[] // Rifas criadas pelo owner
}

model Buyer {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String // Nome do comprador
  phone   String   @unique // Telefone como identificador único
  tickets Ticket[] // Tickets adquiridos pelo comprador
}

model Prize {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  campaignId   String   @db.ObjectId
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  ticket       Ticket?  @relation(fields: [ticketId], references: [id]) // Relacionamento opcional com o ticket
  ticketId     String?  @db.ObjectId
  winnerNumber String?
  winnerName   String?
  position     Int      @default(0) // Campo para armazenar a posição
}
